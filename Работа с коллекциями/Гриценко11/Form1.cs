///дает возможность ссылаться на классы, которые находятся в пространстве имен System, 
//так что их можно использовать, не добавляя System. перед именем типа.
using System;
//Содержит интерфейсы и классы, определяющие универсальные коллекции, 
//которые позволяют пользователям создавать строго типизированные коллекции, 
//обеспечивающие повышенную производительность и безопасность типов 
//по сравнению с неуниверсальными строго типизированными коллекциями.
using System.Collections.Generic;
//Пространство имен System.ComponentModel содержит классы, реализующие поведение 
//компонентов и элементов управления во время проектирования и выполнения.Данное 
//пространство имен включает базовые классы и интерфейсы, предназначенные для реализации 
//преобразователей атрибутов и типов, для привязки к источникам данных и для лицензирования
//компонентов
using System.ComponentModel;
//Пространство имен System.Data обеспечивает доступ к классам, которые представляют архитектуру
//ADO.NET.Архитектура ADO.NET позволяет создавать компоненты, эффективно работающие с данными 
//из различных источников.
using System.Data;
//обеспечивает доступ к базовым функциональным возможностям графического интерфейса GDI+
using System.Drawing;
//Пространство имен System.Linq содержит классы и интерфейсы, которые поддерживают LINQ.
using System.Linq;
//Пространство имен содержит классы, представляющие ASCII и Unicode 
//кодировок; абстрактные базовые классы для преобразования блоков символов
//и из блоков байтов
using System.Text;
// содержит классы для создания приложений Windows, которые позволяют наиболее эффективно 
//использовать расширенные возможности пользовательского интерфейса, 
//доступные в операционной системе Microsoft Windows
using System.Windows.Forms;
//содержит классы, реализующие поведение компонентов и элементов управления во время 
//проектирования и выполнения.Данное пространство имен включает базовые классы и интерфейсы, 
//предназначенные для реализации преобразователей атрибутов и типов, для привязки к 
//источникам данных и для лицензирования компонентов.
using System.Collections;

// объявления области, которая содержит набор связанных объектов. Можно использовать 
//пространство имён для организации элементов кода, а также для создания глобально 
//уникальных типов.
namespace Гриценко11
{
    //Определения класса с именем Form1
    public partial class Form1 : Form
    {
        //Модификатор static используется для объявления статического члена, 
        //принадлежащего типу
        //Создаем массив
        static ArrayList coll = new ArrayList();
        //Объявляем переменные
        int command=-1, ID, outType=1;

        //конструктор класса формы
        public Form1()
        {
            //Обязательный метод для поддержки конструктора - НЕ ИЗМЕНЯЙТЕ СОДЕРЖИМОЕ ДАННОГО 
            //МЕТОДА ПРИ ПОМОЩИ РЕДАКТОРА КОДА
            InitializeComponent();
        }

        //Закрытый (private) доступ является уровнем доступа
        //с минимальными правами, ключевое слово void указывает, что метод не
        //возвращает значение
        //Добавление пункта
        private void AddItem(String item, ref ArrayList coll)
        {
            //Добавляем объект в конец списка
            coll.Add(item);
        }

        //Закрытый (private) доступ является уровнем доступа
        //с минимальными правами, ключевое слово void указывает, что метод не
        //возвращает значение
        //Добавление ID
        private void AddByID(String item, int ID, ref ArrayList coll)
        {
            //Если ID больше кол-ва элементов
            if (ID> coll.Count)
                //Добавляем объект в конец списка
                coll.Add(item);
            // Иначе, вставляем элемент по указанному индексу
            else coll.Insert(ID, item);
        }
        //Закрытый (private) доступ является уровнем доступа
        //с минимальными правами, ключевое слово void указывает, что метод не
        //возвращает значение
        //Посик первого элемента с начала списка 
        private void SearchFirs(String item,ref ArrayList coll,ref int ID )
        { 
            //Осуществляет поиск указанного индекса
            ID = coll.IndexOf(item);
        }
        //Закрытый (private) доступ является уровнем доступа
        //с минимальными правами, ключевое слово void указывает, что метод не
        //возвращает значение
        //Посик первого элемента с конца списка 
        private void SearchLast(String item, ref ArrayList coll, ref int ID)
        {
            //Возвращает позицию индекса с отсчетом от нуля последнего вхождения
            //указанной строки в данном экземпляре
            ID = coll.LastIndexOf(item);
        }

        //Удаление элемета по значению
        private void DelOnItem(String item, ref ArrayList coll)
        {
            //Удаляем первое вхождение указанного объекта 
            coll.Remove(item);
        }
        //Удаление элемета по индексу
        private void DelOnID(int ID, ref ArrayList coll)
        {
            //Удаляем элемент с указанным индексом
            coll.RemoveAt(ID);
        }
        //Удаленить диапазон элементов по индексу
        private void DelRange(int ID, int ID1, ref ArrayList coll)
        {
            //Удаляет диапазон элементов из списка
            coll.RemoveRange(ID,ID1-ID+1);
        }
        //Сортировка элементов
        private void SortColl(ref ArrayList coll)
        {
            //Сортирует элементы в списке
            coll.Sort();
        }
        //Изменить порядок следования элементов в списке
        private void Disorder(ref ArrayList coll)
        {
            //Изменяет порядок элементов во всем списке
            coll.Reverse();
        }
        //Удалить все элементы
        private void CollClear(ref ArrayList coll)
        {
            //Удаляет все элементы из списка
            coll.Clear();
        }
        //Закрытый (private) доступ является уровнем доступа
        //с минимальными правами, ключевое слово void указывает, что метод не
        //возвращает значение
        //Список 
        private void OnList(ArrayList coll, ref ListBox list)
        {
            //Удаляет все элементы из коллекции
            list.Items.Clear();
            for (int i = 0; i < coll.Count; i++)
            {
                //switch — это оператор управления, выбирающий из списка возможных вариантов раздел 
                //переключения, для выполнения содержащегося в нём кода.
                switch (outType)
                {
                    //Добавляем элемент в список позиций (Преобразует указанное значение в его эквивалентное
                    //строковое представление.) Значение - индекс
                    case 1: list.Items.Add(Convert.ToString(i) + " - " + Convert.ToString(coll[i]));
                        //завершает ближайший внешний цикл или оператор switch
                        break;
                    //Добавляем элемент в список позиций (Преобразует указанное значение в его эквивалентное
                    //строковое представление.) индекс 
                    case 2: list.Items.Add(Convert.ToString(coll[i]));
                        //завершает ближайший внешний цикл или оператор switch
                        break;
                    //Добавляем элемент в список позиций (Преобразует указанное значение в его эквивалентное
                    //строковое представление.) Значение 
                    case 3: list.Items.Add(Convert.ToString(i));
                        //завершает ближайший внешний цикл или оператор switch
                        break;
                }
            }
        }
        //Закрытый (private) доступ является уровнем доступа
        //с минимальными правами
        //bool используется для объявления переменных для хранения 
        //логических значений, true и false.
        //Интервал (текстовое поле)
        private bool examOnInt(TextBox txt)
        {
            //Инструкция try-catch состоит из блока try, за которым следует одно или несколько предложений 
            //блока catch, в которых определяются обработчики для различных исключений.
            try
            {
                //Преобразуем строковое представление числа с указанным основанием системы счисления в 
                //эквивалентное ему 32-битовое целое число со знаком.
                Convert.ToInt32(txt.Text);
            }
            //Исключение
            catch (Exception)
            {
                // слово this ссылается на текущий экземпляр класса, а также используется в качестве модификатора
                //первого параметра метода расширения.
                //Вывод окна с ошибкой
                MessageBox.Show(this, "Введите число!", "Ошибка");
                //ФОкус на тектовое окно
                txt.Focus();
                //
                return false;
            }
            //Прерывание
            return true;
        }
        //Закрытый (private) доступ является уровнем доступа
        //с минимальными правами
        //bool используется для объявления переменных для хранения 
        //логических значений, true и false.
        //Интервал
        private bool examOnInt(String item)
        {
            //Инструкция try-catch состоит из блока try, за которым следует одно или несколько предложений 
            //блока catch, в которых определяются обработчики для различных исключений.
            try
            {
                //Преобразуем строковое представление числа с указанным основанием системы счисления в 
                //эквивалентное ему 32-битовое целое число со знаком.
                Convert.ToInt32(item);
            }
            //Исключение
            catch (Exception)
            {
                // слово this ссылается на текущий экземпляр класса, а также используется в качестве модификатора
                //первого параметра метода расширения.
                //Вывод окна с ошибкой
                MessageBox.Show(this, "Введите число!", "Ошибка");
                return false;
            }
            //Прерывание
            return true;
        }
       //Удалить диапазон элементов по индексу
        private void cmbCommand_SelectedIndexChanged(object sender, EventArgs e)
        {
            //Задаем индекс, указываюзий выделенных элемент
            command = cmbCommand.SelectedIndex;
            
            //Текстовое поле значение не равно индексу
            txtID.ReadOnly = txtItem.ReadOnly = false;

            //Если выбрана 6 команда
            if (command == 6)
            {
                //В метку выводится текст
                lblHelp.Text = "Введите Индексы конечного и начального элементов\nв формате: 1-4";
                //Метка видима
                lblHelp.Visible = true;
            }
        }

        //Нажатие на кнопку ОК
        private void btnOK_Click(object sender, EventArgs e)
        {
          

           //Если выбрана команда 0 ИЛИ 2 ИЛИ 3 ИЛИ 4 И задаем текст в текстовом поле (Значение)
           if ((command == 0 || command == 2 || command == 3 || command == 4)&&txtItem.Text == "")
            {
                //Вывод окна с ошибкой 
                MessageBox.Show("Значения введены не верно!", "Error");
               //Прерывание
                return;
            }
           //Если выбрана команда 1 ИЛИ 5 И задаем текст в текстовом поле (ID)
            if ((command == 1 || command == 5) && examOnInt(txtID) == false)
            {
                //Вывод окна с ошибкой 
                MessageBox.Show("Значения введены не верно!", "Error");
                //Прерывание
                return;
            }

            //switch — это оператор управления, выбирающий из списка возможных вариантов раздел 
            //переключения, для выполнения содержащегося в нём кода.
            switch (command)
            {
                //Добавляем элемент в список позиций (Преобразует указанное значение в его эквивалентное
                //строковое представление.) Значение
                //слово ref приводит к передаче аргумента по ссылке
                case 0: AddItem(txtItem.Text, ref coll);
                    break;
                //Добавляем элемент в список позиций (Преобразует указанное значение в его эквивалентное
                //строковое представление.) Значение
                //слово ref приводит к передаче аргумента по ссылке
                case 1: AddByID(txtItem.Text,Convert.ToInt32(txtID.Text),ref coll);
                    break;
                //Найти индекс первого элемента с начала списка по значения. 
                //Задаем текущий текст в текстовое поле
                case 2: SearchFirs(txtItem.Text, ref coll,ref ID);
                        //Если ID = -1
                        if (ID == -1)
                        {
                            //Вывод текста
                            txtID.Text = "Nan";
                        }
                        //Иначе
                        else  
                        //Преобразуем значение числа в эквивалентное строковое представление
                        txtID.Text = (Convert.ToString(ID));
                        // Текст видем
                        txtID.ReadOnly = true;
                    //Завершаем цикл
                    break;
                //Найти индекс первого элемента с конца списка по значения. 
                //слово ref приводит к передаче аргумента по ссылке
                //Задаем текущий текст в текстовое поле
                case 3: SearchLast(txtItem.Text, ref coll, ref ID);
                         //Если ID = -1
                        if (ID == -1)
                        {
                            //Вывод текста
                            txtID.Text = "Nan";
                        }
                        //Иначе
                        else
                        //Преобразуем значение числа в эквивалентное строковое представление
                        txtID.Text = (Convert.ToString(ID));
                        // Текст виден
                        txtID.ReadOnly = true;
                    //Завершаем цикл
                    break;
                //Удаление элемета по значению
                case 4: DelOnItem(txtItem.Text, ref coll);
                    //Завершаем цикл
                    break;
                //Если ID больше количества элементов 
                case 5: if (Convert.ToInt32(txtID.Text) > coll.Count - 1)
                        {
                            //Вывод окна
                            MessageBox.Show("Значения введены не верно!", "Error");
                            //Прерывание
                            return;
                        }
                        //Удалить по ID
                        DelOnID(Convert.ToInt32(txtID.Text), ref coll);
                    //Завершаем цикл
                    break;
                //Удаление диапазона элементов по индексу
                case 6: if (txtID.Text.Contains('-'))
                        {
                            //Возвращаем строковый массив, содержащий подстроки данного экземпляра,
                           //разделенные элементами заданного массива знаков Юникода.
                            string[] mass = txtID.Text.Split('-');
                            //Преобразует строковое представление числа с указанным основанием системы
                             //счисления в эквивалентное ему 32-битовое целое число со знаком.
                            if (examOnInt(mass[0]) == false 
                                || examOnInt(mass[1]) == false 
                                || Convert.ToInt32(mass[0]) > Convert.ToInt32(mass[1]) 
                                || Convert.ToInt32(mass[1]) > coll.Count-1)
                            {
                                //Прерывание
                                return;
                            }
                            //Удаление диапазона из массива
                            DelRange(Convert.ToInt32(mass[0]), Convert.ToInt32(mass[1]), ref coll);
                        }
                        // Иначе Вывод окна 
                        else MessageBox.Show("Значения введены не верно!", "Error");
                    //Завершаем цикл
                    break;
                //Сортировка элементов списка
                case 7: SortColl(ref coll);
                    //Завершаем цикл
                    break;
                //Изменение порядка следования элементов в списке
                case 8: Disorder(ref coll);
                    //Завершаем цикл
                    break;
                //Удаление всех элементов из списка
                case 9: CollClear(ref coll);
                    //Завершаем цикл
                    break;
                //Если ни одна из меток case не содержит совпадающего значения, управление передаётся 
                //в раздел default (значение по умолчанию)
                 //Вывод окна
                default: MessageBox.Show("Нечего делать!", "Error");
                    //Завершаем цикл
                    break;
            }
            //Записываем в лист
            OnList(coll, ref listColl);
            //Кол-во элементов
            //Преобразуем значение числа в эквивалентное строковое представление
            lblNumEl.Text = Convert.ToString(coll.Count);
        }
        //Нажатие на тектовое окно значение
        private void txtItem_KeyPress(object sender, KeyPressEventArgs e)
        {
            //Записываем число
            if (txtItem.Text != "" && e.KeyChar == 13)
                //Кнопка отчистить
                btnOK_Click(sender, e);
        }
        //Нажатие на тектовое окно индекс
        private void txtID_KeyPress(object sender, KeyPressEventArgs e)
        {
            //Записываем число
            if (txtID.Text != "" && e.KeyChar == 13)
                //Кнопка отчистить
                btnOK_Click(sender, e);
        }
        //Нажатие на кнопку выхрд
        private void btnExit_Click(object sender, EventArgs e)
        {
            //Закрытие формы
            Close();
        }
        //Вывод данных Ключ-значение
        private void rbOutType1_CheckedChanged(object sender, EventArgs e)
        {
            outType = 1;
            //слово ref приводит к передаче аргумента по ссылке
            //Задаем текущий текст в текстовое поле
            OnList(coll, ref listColl);
        }
        //Вывод данных только значение 
        private void rbOutType2_CheckedChanged(object sender, EventArgs e)
        {
            outType = 2;
            //слово ref приводит к передаче аргумента по ссылке
            //Задаем текущий текст в текстовое поле
            OnList(coll, ref listColl);
        }
        //Вывод данных только Ключ
        private void rbOutType3_CheckedChanged(object sender, EventArgs e)
        {
            outType = 3;
            //слово ref приводит к передаче аргумента по ссылке
            //Задаем текущий текст в текстовое поле
            OnList(coll, ref listColl);
        }
    }
}
