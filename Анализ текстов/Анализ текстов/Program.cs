//Дает возможность ссылаться на классы, которые находятся в пространстве имен System, 
//так что их можно использовать, не добавляя System. перед именем типа.
using System;
//Содержит интерфейсы и классы, определяющие универсальные коллекции, 
//которые позволяют пользователям создавать строго типизированные коллекции, 
//обеспечивающие повышенную производительность и безопасность типов 
//по сравнению с неуниверсальными строго типизированными коллекциями.
using System.Collections.Generic;
//Пространство имен содержит классы, представляющие ASCII и Unicode 
//кодировок; абстрактные базовые классы для преобразования блоков символов
//и из блоков байтов
using System.Text;
//Пространство имен System.IO содержит типы, позволяющие осуществлять чтение и запись в 
//файлы и потоки данных, а также типы для базовой поддержки файлов и папок.
using System.IO;

/*
* 1. Необходимо написать программу, которая бы выполняла анализ текстов
*    и вычисление статистической информации. Текст должен загружаться из файла.
*
*    В качестве результата следует вывести пользователю два списка:
 *    -слова, которые встретились в тексте, и частота повторения каедого слова;
 *    -символы, которые встретились в тексте, и частота повторения каедого символа;
 *    
 *Списки должны быть упорядочены по частоте. То есть самые популярные слова 
 *и символы должны оказаться вверху списков. При выводе списка символов 
 *не нужно отличать заглавные буквы от строчных.
 */

// объявления области, которая содержит набор связанных объектов. Можно использовать 
//пространство имён для организации элементов кода, а также для создания глобально 
//уникальных типов.
namespace Анализ_текстов
{
    //Определения класса с именем Program
    class Program
    {
        //Модификатор static используется для объявления статического члена, принадлежащего 
        //собственно типу, а не конкретному объекту.
        //Слово void указывает, что метод не возвращает значение
        //Метод Main является точкой входа EXE-программы, в которой начинается и заканчивается 
        //управление программой.
        //string[] содержит аргументы командной строки, или без него.
        //Массив аргументов, который передается приложению операционной системой.
        static void Main(string[] args)
        {
            //задаем заголовок для отображения в строке заголовка консоли.
            Console.Title = "Статистический анализатор текста"; 
            //Высота консоли
            Console.WindowHeight = 80;
            //Здаем высоту буферной области.
            Console.BufferHeight = Int16.MaxValue - 1;
            
            string fileName = "file.txt"; // файл для анализа 
            string content = "";	      // содержимое файла
            
            // Считываем из файла текст 
            while (true)
            {
                //Если файл существует
                if (File.Exists(fileName))
                {
                    //Открываем текстовый файл, считывает все строки файла в строку 
                    //и затем закрывает файл.Используем кодировку 1251
                    content = File.ReadAllText(fileName, Encoding.GetEncoding(1251));
                    break;
                }
                else
                {
                    //Записываем указанные данные с текущим признаком конца строки
                    //в стандартный выходной поток.
                    Console.WriteLine();
                    Console.WriteLine(" Файл \"{0}\" не найден!", fileName);
                    Console.Write(" Введите имя файла для анализа или пустую строку для выхода:");
                    //Считываем следующую строку символов из стандартного входного потока.
                    fileName = Console.ReadLine();

                    if (fileName == "")
                        return;
                }
            }
            //Отчищаем консоль
            Console.Clear();
            //Конец строки
            Console.WriteLine();
            
            // Подготовка текста (то, что происходит в конструкторе)
            DateTime start = DateTime.Now;
            //Калькулятор статистики для текстов
            //Создаем экземпляр класса TextStat, передаем в конструктор контент 
            TextStat tStat = new TextStat(content);
            //Засекаем время
            Console.WriteLine(" Время подготовки текста: {0}", DateTime.Now - start);

            // Занесение элементов в контейнеры 
            start = DateTime.Now; tStat.Run();
            Console.WriteLine("Время занесения элементов в контейнер: {0}", DateTime.Now - start);
            
            // Создание отсортированных списков элементов 
            start = DateTime.Now;
	        //Массив слов
            List<WordStatInfo> wordList = tStat.GetWordStat();
            //Массив символов
            List<CharStatInfo> charList = tStat.GetCharStat();
            //Записываем время сортировки списков слов и символов
            Console.WriteLine(" Время сортировки списков слов и символов: {0}", DateTime.Now - start);

            // Вывод ИТОГО 
            Console.WriteLine();
            //Проводим черту по ширине консоли 
            Console.WriteLine(new string('=', Console.WindowWidth));
            //Вывод слов и символов
            Console.WriteLine(" Количество слов всего : {0}, уникальных: {1}", 
                                tStat.WordsCount, wordList.Count);
            Console.WriteLine(" Количество слов всего : {0}, уникальных: {1}", 
                                tStat.CharsCount, charList.Count);
            Console.WriteLine();
            //Проводим черту по ширине консоли 
            Console.WriteLine(new string('=', Console.WindowWidth));
            
            Console.Write("Нажмите любую клавишу., чтобы вывести списки");
            //Ждем пока пользователь нажмет клавишу
            Console.ReadKey();
            
            // Вывод списков и сохранение в файл (для мониторинга)
            Console.WriteLine();
            //Создаем новый экземпляр класса StringBuilder 
            StringBuilder sb = new StringBuilder();

            Console.WriteLine();
            Console.WriteLine("======== WORDS ========");
            
            //Добавляем знак завершения строки по умолчанию в конец текущего объекта StringBuilder
            sb.AppendLine();
            sb.AppendLine("======== WORDS ========");
            
            //Оператор foreach повторяет группу вложенных операторов для каждого элемента 
            //массива или коллекции объектов
            //Считаем частоту использования слова
            foreach (WordStatInfo w in wordList)
            {
                //Записываем текстовое представление заданного объекта, за которым следует 
                //текущий признак конца строки (кол-во, слово)
                Console.WriteLine("{0} : '{1}'", w.Count, w.Word);
                //Заменяем элементы формата в указанной строке строковым представлением 
                //двух указанных объектов ((кол-во, слово))
                sb.AppendLine(string.Format("{0} : '{1}'", w.Count, w.Word));
            }
            
            Console.WriteLine();
            Console.WriteLine("======== CHARS =========");
            //Добавляем знак завершения строки по умолчанию в конец текущего объекта StringBuilder
            sb.AppendLine();
            sb.AppendLine("======== CHARS ========");
            //Оператор foreach повторяет группу вложенных операторов для каждого элемента 
            //массива или коллекции объектов
            //Считаем частоту использования символа
            foreach (CharStatInfo ch in charList)
            {
                //Записываем текстовое представление заданного объекта, за которым следует 
                //текущий признак конца строки (кол-во, символ)
                Console.WriteLine("{0} : '{1}'", ch.Count, ch.Character);
                //Заменяем элементы формата в указанной строке строковым представлением 
                //двух указанных объектов ((кол-во, символ))
                sb.AppendLine(string.Format("{0} : '{1}'", ch.Count, ch.Character));
            }

            //Создает новый файл, записывает в него содержимое и затем закрывает файл. 
            //Если целевой файл уже существует, он будет переопределен.
            File.WriteAllText("output.txt" , sb.ToString(), Encoding.GetEncoding(1251)); 
            
            //Ожидание
            Console.ReadKey();
        }
    }
}
