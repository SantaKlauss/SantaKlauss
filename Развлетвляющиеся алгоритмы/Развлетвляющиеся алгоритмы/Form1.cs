///дает возможность ссылаться на классы, которые находятся в пространстве имен System, 
//так что их можно использовать, не добавляя System. перед именем типа.
using System;
//Содержит интерфейсы и классы, определяющие универсальные коллекции, 
//которые позволяют пользователям создавать строго типизированные коллекции, 
//обеспечивающие повышенную производительность и безопасность типов 
//по сравнению с неуниверсальными строго типизированными коллекциями.
using System.Collections.Generic;
//Пространство имен System.ComponentModel содержит классы, реализующие поведение 
//компонентов и элементов управления во время проектирования и выполнения.Данное 
//пространство имен включает базовые классы и интерфейсы, предназначенные для реализации 
//преобразователей атрибутов и типов, для привязки к источникам данных и для лицензирования
//компонентов.
using System.ComponentModel;
//Пространство имен System.Data обеспечивает доступ к классам, которые представляют архитектуру
//ADO.NET.Архитектура ADO.NET позволяет создавать компоненты, эффективно работающие с данными 
//из различных источников.
using System.Data;
//обеспечивает доступ к базовым функциональным возможностям графического интерфейса GDI+
using System.Drawing;
//Пространство имен System.Linq содержит классы и интерфейсы, которые поддерживают LINQ.
using System.Linq;
//Пространство имен содержит классы, представляющие ASCII и Unicode 
//кодировок; абстрактные базовые классы для преобразования блоков символов
//и из блоков байтов
using System.Text;
// содержит классы для создания приложений Windows, которые позволяют наиболее эффективно 
//использовать расширенные возможности пользовательского интерфейса, 
//доступные в операционной системе Microsoft Windows
using System.Windows.Forms;
//содержит классы, реализующие поведение компонентов и элементов управления во время 
//проектирования и выполнения.Данное пространство имен включает базовые классы и интерфейсы, 
//предназначенные для реализации преобразователей атрибутов и типов, для привязки к 
//источникам данных и для лицензирования компонентов.
using System.ComponentModel;

// объявления области, которая содержит набор связанных объектов. Можно использовать 
//пространство имён для организации элементов кода, а также для создания глобально 
//уникальных типов
namespace Развлетвляющиеся_алгоритмы
{
    //Определения класса с именем Form1
    public partial class Form1 : Form
    {
        
        //конструктор класса формы
        public Form1()
        {
            //Обязательный метод для поддержки конструктора - НЕ ИЗМЕНЯЙТЕ СОДЕРЖИМОЕ ДАННОГО 
            //МЕТОДА ПРИ ПОМОЩИ РЕДАКТОРА КОДА
            InitializeComponent();
        }

        //Событие происходит, когда форма начинает отображаться.
        private void Form1_Shown_1(object sender, EventArgs e)
        {
            //Фокус на маску Т
            mskX.Focus();
        }

        //Нажатие на маску Х
        private void mskX_KeyPress_1(object sender, KeyPressEventArgs e)
        {
            //Получаем символ, соответсвующий нажатой клавиши
            if (e.KeyChar == 13)
                //Фокус на маску Т
                mskT.Focus();
        }
        //Нажатие на маску Т
        private void mskT_KeyPress_1(object sender, KeyPressEventArgs e)
        {
            //Получаем символ, соответсвующий нажатой клавиши
            if (e.KeyChar == 13)
                //Вычислить
                btnDecide_Click_1(sender, e);
        }

        //Нажатие на кнопку Вычислить
        private void btnDecide_Click_1(object sender, EventArgs e)
        {
            //Объявляем переменные 
            //(double - число двойной точности с плавающей запятой)
            double x, t, z, p, y;
            //Преобразуем строковое чмсло в число двойной точности с плавающей запятой
            x = Convert.ToDouble(mskX.Text);
            //Преобразуем строковое чмсло в число двойной точности с плавающей запятой
            t = Convert.ToDouble(mskT.Text);
            //Формула
            z = Math.Log(Math.Abs((2 * Math.Pow(x, 2) - 1) / (3 * t + 1)), 3.0);
            //Если z >=0
            if (z >= 2)
                // формула
                p = 1 / Math.Sqrt(2 + 3 * Math.Pow(z, 2));
                //Иначе если И z<2
            else if (z <= 0 && z < 2)
                p = z;
            else
                //Считакм по формуле
                p = z / Math.Sqrt(2 + 3 * Math.Pow(z, 2));

            y = p * Math.Exp(Math.Cos(x) - 1);

            // Задаем значение, определяющее, находится ли CheckBox в выбранном состоянии.
            if (chkFormat.Checked)
            {
                //Оставляем 4 знака после запятой 
                txtZ.Text = String.Format("{0:N4}", z);
                //Оставляем 4 знака после запятой 
                txtP.Text = String.Format("{0:N4}", p);
                //Оставляем 4 знака после запятой 
                txtY.Text = String.Format("{0:N4}", y);
            }
            //Иначе 
            else
            {
                //Преобразуем числовое значение данного экземпляра в эквивалентное ему 
                //строковое представление с использованием указанного формата
                txtZ.Text = z.ToString();
                //Преобразуем числовое значение данного экземпляра в эквивалентное ему 
                //строковое представление с использованием указанного формата
                txtP.Text = p.ToString();
                txtY.Text = y.ToString();
            }

        }

        //Нажатие на кнопку отчистить
        private void btnClear_Click_1(object sender, EventArgs e)
        {
            //Удаляем весь текст из элемента управления "Текстовое поле"
            txtZ.Clear();
            //Удаляем весь текст из элемента управления "Текстовое поле"
            txtP.Clear();
            //Удаляем весь текст из элемента управления "Текстовое поле"
            txtY.Clear();
        }
        //Нажатие на кнопку выход
        private void btnExit_Click_1(object sender, EventArgs e)
        {
            //Закрываем форму
            Close();

        }
    }
}
