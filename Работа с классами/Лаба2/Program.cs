//Дает возможность ссылаться на классы, которые находятся в пространстве имен System, 
//так что их можно использовать, не добавляя System. перед именем типа.
using System;
//Содержит интерфейсы и классы, определяющие универсальные коллекции, 
//которые позволяют пользователям создавать строго типизированные коллекции, 
//обеспечивающие повышенную производительность и безопасность типов 
//по сравнению с неуниверсальными строго типизированными коллекциями.
using System.Collections.Generic;
//Пространство имен System.Linq содержит классы и интерфейсы, которые поддерживают LINQ.
using System.Linq;
//Пространство имен содержит классы, представляющие ASCII и Unicode 
//кодировок; абстрактные базовые классы для преобразования блоков символов
//и из блоков байтов
using System.Text;

// объявления области, которая содержит набор связанных объектов. Можно использовать 
//пространство имён для организации элементов кода, а также для создания глобально 
//уникальных типов
namespace Лаба2
    {
        //Модификатор abstract указывает, что реализация изменяемого объекта является неполной 
    //или отсутствует.Модификатор abstract может использоваться с классами, методами, свойствами,
    //индексаторами и событиями.Модификатор abstract в объявлении класса указывает, что класс 
    //предназначен только для использования в качестве базового класса для других классов
        abstract class UserInfo
        {
            // protected является модификатором доступа к члену.Доступ к члену с модификатором 
            //protected возможен внутри класса и из производных экземпляров класса.
            protected string Name;
            // protected является модификатором доступа к члену.Доступ к члену с модификатором 
            //protected возможен внутри класса и из производных экземпляров класса.
            protected byte Age;
            // protected является модификатором доступа к члену.Доступ к члену с модификатором 
            //protected возможен внутри класса и из производных экземпляров класса.
            protected string Work;
            // protected является модификатором доступа к члену.Доступ к члену с модификатором 
            //protected возможен внутри класса и из производных экземпляров класса.
            protected int Zarplata;

            //Доступ является уровнем доступа с максимальными правами
            public UserInfo(string Name, byte Age, string Work, int Zarplata)
            {
                //this используется для квалификации членов класса UserInfo, Name, Age, Work
                //и Zarplata которые  скрыты одинаковыми именами.Также это ключевое слово 
                //используется для передачи объекта в метод UserFamily, который принадлежит 
                //к другому классу
                this.Name = Name;
                //this используется для квалификации членов класса UserInfo, Name, Age, Work
                //и Zarplata которые  скрыты одинаковыми именами.Также это ключевое слово 
                //используется для передачи объекта в метод UserFamily, который принадлежит 
                //к другому классу
                this.Age = Age;
                //this используется для квалификации членов класса UserInfo, Name, Age, Work
                //и Zarplata которые  скрыты одинаковыми именами.Также это ключевое слово 
                //используется для передачи объекта в метод UserFamily, который принадлежит 
                //к другому классу
                this.Work = Work;
                //this используется для квалификации членов класса UserInfo, Name, Age, Work
                //и Zarplata которые  скрыты одинаковыми именами.Также это ключевое слово 
                //используется для передачи объекта в метод UserFamily, который принадлежит 
                //к другому классу
                this.Zarplata = Zarplata;
            }

            // Абстрактный метод
            public abstract string ui();
        }
        //Определения класса с именем UserFamily
        class UserFamily : UserInfo
        {
            // Поля класса
            string Family;

            // Метод, выводящий в консоль контактную информацию
            public UserFamily(string Family, string Name, string Work, byte Age, int Zarplata)
                //слово base используется для доступа к членам базового класса 
                //из производного класс
                : base(Name, Age, Work, Zarplata)
            {
                //this используется для квалификации членов класса UserInfo, Name, Age, Work
                //и Zarplata которые  скрыты одинаковыми именами.Также это ключевое слово 
                //используется для передачи объекта в метод UserFamily, который принадлежит 
                //к другому классу
                this.Family = Family; this.Work = Work; this.Zarplata = Zarplata;
            }

            // Переопределяем метод ui
            public override string ui()
            {
                // Выведем информацию в консоль
                return Family + " " + Name + " " + Age + " " + Work + " " + Zarplata;
            }
        }
        //Определения класса с именем Program
        class Program
        {
            //Модификатор static используется для объявления статического члена, принадлежащего 
            //собственно типу, а не конкретному объекту.
            //Слово void указывает, что метод не возвращает значение
            //Метод Main является точкой входа EXE-программы, в которой начинается и заканчивается 
            //управление программой.
            //string[] содержит аргументы командной строки, или без него.
            //Массив аргументов, который передается приложению операционной системой
            static void Main(string[] args)
            {
                // Создадим новый экземпляр класса UserInfo
                UserFamily user1 = new UserFamily("Сидоров", "Егор", "Завод-Yrgymka", 25, 1000);
                //Записывает текущий признак конца строки в стандартный выходной поток.
                Console.WriteLine(user1.ui());
                //Считывает следующую строку символов из стандартного входного потока
                Console.ReadLine();
            }
        }
    }
